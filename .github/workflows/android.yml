name: 安卓CI流程

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    name: 构建与测试
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: 设置Android SDK
      uses: android-actions/setup-android@v2
      
    - name: 缓存Gradle包
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # 检查项目结构和gradlew位置
    - name: 检查项目结构
      run: |
        ls -la
        find . -name "gradlew" -type f
          
    # 检查项目是否需要初始化Gradle Wrapper
    - name: 初始化Gradle Wrapper（如果需要）
      run: |
        if [ ! -f "./gradlew" ] && [ ! -f "./smartshop/gradlew" ]; then
          echo "未找到Gradle Wrapper，正在初始化..."
          gradle wrapper
        fi
      
    # 使用正确的gradlew路径
    - name: 授予执行权限
      run: |
        if [ -f "./gradlew" ]; then
          chmod +x ./gradlew
          echo "使用根目录的gradlew"
        elif [ -f "./smartshop/gradlew" ]; then
          chmod +x ./smartshop/gradlew
          echo "使用smartshop目录的gradlew"
        else
          echo "错误：找不到gradlew文件"
          exit 1
        fi
      
    - name: 代码检查
      run: |
        if [ -f "./gradlew" ]; then
          ./gradlew lint
        else
          cd smartshop && ../gradlew lint
        fi
      
    - name: 上传代码检查报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-report
        path: |
          */build/reports/lint-results-debug.html
          smartshop/build/reports/lint-results-debug.html
        
    - name: 运行单元测试
      run: |
        if [ -f "./gradlew" ]; then
          ./gradlew test
        else
          cd smartshop && ../gradlew test
        fi
      
    - name: 上传测试报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-report
        path: |
          */build/reports/tests/
          smartshop/build/reports/tests/
        
    - name: 构建Debug APK
      run: |
        if [ -f "./gradlew" ]; then
          ./gradlew assembleDebug
        else
          cd smartshop && ../gradlew assembleDebug
        fi
      
    - name: 上传Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: |
          */build/outputs/apk/debug/*.apk
          smartshop/build/outputs/apk/debug/*.apk
        
  ui-test:
    name: 安卓UI测试
    needs: build
    runs-on: macos-latest  # 使用macOS以获得更好的模拟器性能
    timeout-minutes: 45
    
    strategy:
      matrix:
        api-level: [30]  # Wear OS 最常用API级别
        target: [google_apis]
        arch: [x86_64]
        
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: 缓存Gradle包
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # 检查项目结构和gradlew位置
    - name: 检查项目结构
      run: |
        ls -la
        find . -name "gradlew" -type f
          
    # 使用正确的gradlew路径
    - name: 授予执行权限
      run: |
        if [ -f "./gradlew" ]; then
          chmod +x ./gradlew
          echo "使用根目录的gradlew"
        elif [ -f "./smartshop/gradlew" ]; then
          chmod +x ./smartshop/gradlew
          echo "使用smartshop目录的gradlew"
        else
          echo "错误：找不到gradlew文件"
          exit 1
        fi
      
    - name: 创建AVD并运行模拟器
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: ${{ matrix.arch }}
        profile: Wear OS
        script: |
          if [ -f "./gradlew" ]; then
            ./gradlew connectedCheck
          else
            cd smartshop && ../gradlew connectedCheck
          fi
        
    - name: 上传UI测试报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-test-report
        path: |
          */build/reports/androidTests/
          smartshop/build/reports/androidTests/
        
  release:
    name: 创建发布版本
    needs: [build, ui-test]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: 缓存Gradle包
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # 检查项目结构和gradlew位置
    - name: 检查项目结构
      run: |
        ls -la
        find . -name "gradlew" -type f
          
    # 使用正确的gradlew路径
    - name: 授予执行权限
      run: |
        if [ -f "./gradlew" ]; then
          chmod +x ./gradlew
          echo "使用根目录的gradlew"
        elif [ -f "./smartshop/gradlew" ]; then
          chmod +x ./smartshop/gradlew
          echo "使用smartshop目录的gradlew"
        else
          echo "错误：找不到gradlew文件"
          exit 1
        fi
      
    - name: 构建Release APK
      run: |
        if [ -f "./gradlew" ]; then
          ./gradlew assembleRelease
        else
          cd smartshop && ../gradlew assembleRelease
        fi
      
    - name: 签名Release APK
      uses: r0adkll/sign-android-release@v1
      id: sign_app
      with:
        releaseDirectory: |
          */build/outputs/apk/release/
          smartshop/build/outputs/apk/release/
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
        
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{steps.sign_app.outputs.signedReleaseFile}}
        name: 发布 ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
