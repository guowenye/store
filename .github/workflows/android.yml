name: 安卓CI流程

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    name: 构建与测试
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: 设置Android SDK
      uses: android-actions/setup-android@v2
      
    - name: 缓存Gradle包
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # 检查项目结构
    - name: 检查项目结构
      run: |
        echo "===== 项目根目录内容 ====="
        ls -la
        echo "===== 查找所有 gradlew 文件 ====="
        find . -name "gradlew" -type f
        echo "===== 查找所有 build.gradle 文件 ====="
        find . -name "build.gradle" -type f
        echo "===== 查找所有 settings.gradle 文件 ====="
        find . -name "settings.gradle" -type f
        
        # 查看settings.gradle的内容，了解模块结构
        echo "===== settings.gradle 内容 ====="
        if [ -f "settings.gradle" ]; then
          cat settings.gradle
        fi
        
        # 查看build.gradle的内容，了解项目配置
        echo "===== 根项目 build.gradle 内容 ====="
        if [ -f "build.gradle" ]; then
          cat build.gradle
        fi
        
        # 列出所有目录，找出可能的模块目录
        echo "===== 查找可能的模块目录 ====="
        find . -maxdepth 1 -type d | grep -v "^\.$" | grep -v "^\./\." | sort
          
    # 检查项目是否需要初始化Gradle Wrapper
    - name: 初始化Gradle Wrapper（如果需要）
      run: |
        if [ ! -f "./gradlew" ]; then
          echo "未找到Gradle Wrapper，正在初始化..."
          gradle wrapper
        fi
      
    # 使用正确的gradlew路径
    - name: 授予执行权限
      run: |
        if [ -f "./gradlew" ]; then
          chmod +x ./gradlew
          echo "使用根目录的gradlew"
          GRADLEW_PATH="./gradlew"
        else
          echo "错误：找不到gradlew文件"
          exit 1
        fi
        echo "GRADLEW_PATH=$GRADLEW_PATH" >> $GITHUB_ENV
      
    # 列出可用的Gradle任务和项目
    - name: 列出可用的Gradle任务和项目
      run: |
        echo "===== 列出所有项目 ====="
        ${{ env.GRADLEW_PATH }} projects
        
        echo "===== 列出根项目可用任务 ====="
        ${{ env.GRADLEW_PATH }} tasks
        
        # 查找子项目并列出它们的任务
        echo "===== 查找并列出子项目任务 ====="
        # 从projects输出中提取子项目
        ${{ env.GRADLEW_PATH }} projects | grep -o "Project ':[^']*'" | sed "s/Project '://g" | sed "s/'//g" > subprojects.txt
        
        if [ -s subprojects.txt ]; then
          echo "找到以下子项目:"
          cat subprojects.txt
          
          # 对每个子项目列出任务
          while read -r project; do
            echo "===== 列出 $project 项目任务 ====="
            ${{ env.GRADLEW_PATH }} :$project:tasks || echo "无法列出 $project 的任务"
          done < subprojects.txt
        else
          echo "未找到子项目"
        fi
    
    # 尝试找出Android应用模块
    - name: 查找Android应用模块
      run: |
        echo "===== 查找包含AndroidManifest.xml的目录 ====="
        find . -name "AndroidManifest.xml" -type f
        
        echo "===== 查找包含android plugin的build.gradle文件 ====="
        find . -name "build.gradle" -type f -exec grep -l "com.android.application" {} \;
        
        # 保存找到的Android应用模块路径
        find . -name "build.gradle" -type f -exec grep -l "com.android.application" {} \; | xargs -I{} dirname {} | sed 's|^\./||' > android_modules.txt
        
        if [ -s android_modules.txt ]; then
          echo "找到以下Android应用模块:"
          cat android_modules.txt
          echo "ANDROID_MODULE=$(head -n 1 android_modules.txt)" >> $GITHUB_ENV
        else
          echo "警告: 未找到Android应用模块，将尝试在根目录运行任务"
          echo "ANDROID_MODULE=." >> $GITHUB_ENV
        fi
      
    # 根据找到的Android模块执行构建任务
    - name: 执行Android构建任务
      run: |
        echo "使用模块: ${{ env.ANDROID_MODULE }}"
        
        if [ "${{ env.ANDROID_MODULE }}" != "." ]; then
          # 对找到的模块执行常见Android任务
          echo "===== 执行模块 lint 任务 ====="
          ${{ env.GRADLEW_PATH }} :${{ env.ANDROID_MODULE }}:lint || echo "lint任务失败或不存在"
          
          echo "===== 执行模块测试任务 ====="
          ${{ env.GRADLEW_PATH }} :${{ env.ANDROID_MODULE }}:test || echo "test任务失败或不存在"
          
          echo "===== 构建Debug APK ====="
          ${{ env.GRADLEW_PATH }} :${{ env.ANDROID_MODULE }}:assembleDebug || echo "assembleDebug任务失败或不存在"
        else
          # 尝试在根项目执行任务
          echo "===== 尝试在根项目执行Android任务 ====="
          ${{ env.GRADLEW_PATH }} lint || echo "lint任务失败或不存在"
          ${{ env.GRADLEW_PATH }} test || echo "test任务失败或不存在"
          ${{ env.GRADLEW_PATH }} assembleDebug || echo "assembleDebug任务失败或不存在"
        fi
        
        # 查找并保存所有构建产物的确切路径
        echo "===== 查找所有构建产物 ====="
        
        # 查找APK文件
        echo "查找APK文件..."
        find . -name "*.apk" > apk_files.txt
        if [ -s apk_files.txt ]; then
          echo "找到以下APK文件:"
          cat apk_files.txt
        else
          echo "未找到APK文件"
        fi
        
        # 查找lint报告
        echo "查找lint报告..."
        find . -name "*lint-results*.html" > lint_files.txt
        if [ -s lint_files.txt ]; then
          echo "找到以下lint报告文件:"
          cat lint_files.txt
        else
          echo "未找到lint报告文件"
        fi
        
        # 查找测试报告目录
        echo "查找测试报告目录..."
        find . -name "tests" -type d > test_dirs.txt
        if [ -s test_dirs.txt ]; then
          echo "找到以下测试报告目录:"
          cat test_dirs.txt
        else
          echo "未找到测试报告目录"
        fi
        
        # 更广泛地查找构建产物
        echo "更广泛地查找所有build目录下的文件..."
        find . -path "*/build/*" -type f -not -path "*/\.*" | head -n 50 > build_files.txt
        if [ -s build_files.txt ]; then
          echo "找到构建目录中的文件(前50个):"
          cat build_files.txt
        else
          echo "未在build目录中找到文件"
        fi
        
        # 创建构建产物目录
        mkdir -p artifacts/apk
        mkdir -p artifacts/lint
        mkdir -p artifacts/tests
        mkdir -p artifacts/other
        
        # 复制APK文件到构建产物目录
        if [ -s apk_files.txt ]; then
          while read -r file; do
            cp "$file" artifacts/apk/
          done < apk_files.txt
        else
          echo "No APK files found" > artifacts/apk/README.txt
        fi
        
        # 复制lint报告到构建产物目录
        if [ -s lint_files.txt ]; then
          while read -r file; do
            cp "$file" artifacts/lint/
          done < lint_files.txt
        else
          echo "No lint reports found" > artifacts/lint/README.txt
        fi
        
        # 复制测试报告到构建产物目录
        if [ -s test_dirs.txt ]; then
          while read -r dir; do
            cp -r "$dir" artifacts/tests/
          done < test_dirs.txt
        else
          echo "No test reports found" > artifacts/tests/README.txt
        fi
        
        # 复制一些其他构建文件到构建产物目录
        if [ -s build_files.txt ]; then
          head -n 10 build_files.txt | while read -r file; do
            cp "$file" artifacts/other/
          done
        else
          echo "No other build files found" > artifacts/other/README.txt
        fi
        
        # 列出构建产物目录内容
        echo "===== 构建产物目录内容 ====="
        ls -la artifacts/apk/
        ls -la artifacts/lint/
        ls -la artifacts/tests/
        ls -la artifacts/other/
      
    # 上传找到的构建产物 - APK文件
    - name: 上传APK文件
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: apk-files
        path: artifacts/apk/
        if-no-files-found: warn
        
    # 上传找到的构建产物 - Lint报告
    - name: 上传Lint报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-reports
        path: artifacts/lint/
        if-no-files-found: warn
        
    # 上传找到的构建产物 - 测试报告
    - name: 上传测试报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: artifacts/tests/
        if-no-files-found: warn
        
    # 上传部分build目录文件，作为备用
    - name: 上传其他构建文件
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: other-build-files
        path: artifacts/other/
        if-no-files-found: warn
