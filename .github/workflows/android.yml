name: 安卓CI流程

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    name: 构建与测试
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: 设置Android SDK
      uses: android-actions/setup-android@v2
      
    - name: 缓存Gradle包
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    # 检查项目结构
    - name: 检查项目结构
      run: |
        echo "===== 项目根目录内容 ====="
        ls -la
        echo "===== 查找所有 gradlew 文件 ====="
        find . -name "gradlew" -type f
        echo "===== 查找所有 build.gradle 文件 ====="
        find . -name "build.gradle" -type f
        echo "===== 查找所有 settings.gradle 文件 ====="
        find . -name "settings.gradle" -type f
          
    # 检查项目是否需要初始化Gradle Wrapper
    - name: 初始化Gradle Wrapper（如果需要）
      run: |
        if [ ! -f "./gradlew" ] && [ ! -f "./smartshop/gradlew" ]; then
          echo "未找到Gradle Wrapper，正在初始化..."
          gradle wrapper
        fi
      
    # 使用正确的gradlew路径
    - name: 授予执行权限
      run: |
        if [ -f "./gradlew" ]; then
          chmod +x ./gradlew
          echo "使用根目录的gradlew"
          GRADLEW_PATH="./gradlew"
        elif [ -f "./smartshop/gradlew" ]; then
          chmod +x ./smartshop/gradlew
          echo "使用smartshop目录的gradlew"
          GRADLEW_PATH="./smartshop/gradlew"
        else
          echo "错误：找不到gradlew文件"
          exit 1
        fi
        echo "GRADLEW_PATH=$GRADLEW_PATH" >> $GITHUB_ENV
      
    # 列出可用的Gradle任务
    - name: 列出可用的Gradle任务
      run: |
        echo "===== 列出根项目可用任务 ====="
        ${{ env.GRADLEW_PATH }} tasks
        
        # 如果存在smartshop目录，也列出它的任务
        if [ -d "./smartshop" ]; then
          echo "===== 列出smartshop项目可用任务 ====="
          cd smartshop && ../gradlew tasks
        fi
        
        # 如果存在app目录，也列出它的任务
        if [ -d "./app" ]; then
          echo "===== 列出app项目可用任务 ====="
          cd app && ../gradlew tasks
        fi
      
    - name: 代码检查
      run: |
        echo "===== 执行代码检查 ====="
        # 尝试不同的方式运行lint任务
        
        # 尝试1: 直接运行lint
        ${{ env.GRADLEW_PATH }} lint || true
        
        # 尝试2: 如果存在smartshop模块，运行它的lint
        if [ -d "./smartshop" ]; then
          echo "尝试运行smartshop:lint"
          ${{ env.GRADLEW_PATH }} :smartshop:lint || true
        fi
        
        # 尝试3: 如果存在app模块，运行它的lint
        if [ -d "./app" ]; then
          echo "尝试运行app:lint"
          ${{ env.GRADLEW_PATH }} :app:lint || true
        fi
        
        # 列出生成的报告文件
        echo "===== 查找生成的lint报告 ====="
        find . -name "*lint-results*.html"
      
    - name: 上传代码检查报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-report
        path: |
          **/build/reports/lint-results*.html
        
    - name: 运行单元测试
      run: |
        echo "===== 执行单元测试 ====="
        # 尝试不同的方式运行test任务
        
        # 尝试1: 直接运行test
        ${{ env.GRADLEW_PATH }} test || true
        
        # 尝试2: 如果存在smartshop模块，运行它的test
        if [ -d "./smartshop" ]; then
          echo "尝试运行smartshop:test"
          ${{ env.GRADLEW_PATH }} :smartshop:test || true
        fi
        
        # 尝试3: 如果存在app模块，运行它的test
        if [ -d "./app" ]; then
          echo "尝试运行app:test"
          ${{ env.GRADLEW_PATH }} :app:test || true
        fi
        
        # 列出生成的报告目录
        echo "===== 查找生成的测试报告 ====="
        find . -name "tests" -type d
      
    - name: 上传测试报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-report
        path: |
          **/build/reports/tests/
        
    - name: 构建Debug APK
      run: |
        echo "===== 构建Debug APK ====="
        # 尝试不同的方式构建Debug APK
        
        # 尝试1: 直接运行assembleDebug
        ${{ env.GRADLEW_PATH }} assembleDebug || true
        
        # 尝试2: 如果存在smartshop模块，运行它的assembleDebug
        if [ -d "./smartshop" ]; then
          echo "尝试运行smartshop:assembleDebug"
          ${{ env.GRADLEW_PATH }} :smartshop:assembleDebug || true
        fi
        
        # 尝试3: 如果存在app模块，运行它的assembleDebug
        if [ -d "./app" ]; then
          echo "尝试运行app:assembleDebug"
          ${{ env.GRADLEW_PATH }} :app:assembleDebug || true
        fi
        
        # 列出生成的APK文件
        echo "===== 查找生成的APK文件 ====="
        find . -name "*.apk"
      
    - name: 上传Debug APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: app-debug
        path: |
          **/build/outputs/apk/debug/*.apk
